function easeInOutQuad(t: number, b: number, c: number, d: number) {  t /= d / 2;  if (t < 1) {    return c / 2 * t * t + b;  }  t--;  return -c / 2 * (t * (t - 2) - 1) + b;}const Utils = {  animateScrollTo: (element: HTMLElement | Window, to: { x: number, y: number }, duration: number) => {    const { x, y } = to;    const startY = element === window ? element.scrollY : (element as HTMLElement).scrollTop;    const startX = element === window ? element.scrollX : (element as HTMLElement).scrollLeft;    const changeX = x - startX;    const changeY = y - startY;    let currentTime = 0;    const increment = 20;    const animateScroll = () => {      currentTime += increment;      const valX = easeInOutQuad(currentTime, startX, changeX, duration);      const valY = easeInOutQuad(currentTime, startY, changeY, duration);      element.scrollTo({ left: valX, top: valY });      if (currentTime < duration) {        setTimeout(animateScroll, increment);      }    };    animateScroll();  },  getOffset: (el: HTMLElement) => {    let _x = 0;    let _y = 0;    let _el: any = el;    while (_el && !isNaN(_el.offsetLeft) && !isNaN(_el.offsetTop)) {      _x += _el.offsetLeft - _el.scrollLeft;      _y += _el.offsetTop - _el.scrollTop;      _el = _el.offsetParent;    }    return { top: _y, left: _x };  },  isPercent: (str: string): boolean => {    return !!str.match(/^(\d+\.?\d.?)%$/) && !str.slice(0, str.length - 1).endsWith('.');  },  parsePercent: (str: string) => {    if (!Utils.isPercent(str)) {      throw new Error('Percentage format error');    }    return parseFloat(str.match(/^(\d+\.?\d.?)%$/)![1]) / 100;  },};export default Utils;